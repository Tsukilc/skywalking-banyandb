# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main

env:
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5

jobs:
  check:
    name: Check
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-tags: true
      - name: Cache Go Modules
        uses: actions/cache@v3
        id: cache-go
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache Tools
        uses: actions/cache@v3
        id: cache-tool
        with:
          path: bin
          key: ${{ runner.os }}-check-tool-${{ hashFiles('**/version.mk') }}
          restore-keys: |
            ${{ runner.os }}-check-tool-
      - uses: actions/setup-node@v3
        with:
          node-version: 20.12
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json
      - name: npm ci and format
        run: |
          cd ui
          npm ci
          npm run format
          cd ../
      - name: Run consistency check
        run: |
          if [ ! -z "`git status -s`" ]; then \
            echo "Following files are not consistent with CI:"; \
            git status -s; \
            exit 1; \
          fi
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - name: Check License Header
        run: make license-check
      - name: Update dependencies
        if: steps.cache-go.outputs.cache-hit != 'true'
        run: GOPROXY=https://proxy.golang.org go mod download
      - name: Check requirements
        run: make check-req
      - name: Generate codes
        run: make generate
      - name: Build
        run: make build
      - name: Lint
        run: make lint
      - name: Generate dependencies licenses
        run: make license-dep
      - name: Check
        run: make check
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Start MinIO server
        run: |
          docker run -d \
            --network=host \
            --name minio \
            -e "MINIO_ROOT_USER=OjezEU7caGd8H9zSG4Ov" \
            -e "MINIO_ROOT_PASSWORD=9tWu8XB8Cemol44pVGd661ZkyAwJ1OPNd6BC0tmH" \
            quay.io/minio/minio:RELEASE.2025-03-12T18-04-18Z-cpuv1 \
            server /data --console-address ":9001"

      - name: Wait for service readiness
        run: |
          until curl -s http://localhost:9000/minio/health/live; do sleep 5; done

      - name: Configure MinIO client
        run: |
          docker exec minio mc alias set local \
            http://localhost:9000 \
            "OjezEU7caGd8H9zSG4Ov" \
            "9tWu8XB8Cemol44pVGd661ZkyAwJ1OPNd6BC0tmH" \
            --api s3v4 \
            --insecure

      - name: Create persistent bucket
        run: |
          docker exec minio mc mb local/bydb233
          docker exec minio mc version enable local/bydb233

      - name: Configure AWS for MinIO
        run: |
          mkdir -p ~/.aws
          cat << EOF > ~/.aws/config
          [profile banyandb]
          region = eu-north-1
          output = json
          max_attempts = 5
          endpoint_url = http://localhost:9000
          EOF

          cat << EOF > ~/.aws/credentials
          [banyandb]
          aws_access_key_id = OjezEU7caGd8H9zSG4Ov
          aws_secret_access_key = 9tWu8XB8Cemol44pVGd661ZkyAwJ1OPNd6BC0tmH
          EOF

          chmod 600 ~/.aws/credentials


  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-tags: true
      - name: Cache Go Modules
        uses: actions/cache@v3
        id: cache-go
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache Tools
        uses: actions/cache@v3
        id: cache-tool
        with:
          path: bin
          key: ${{ runner.os }}-build-tool-${{ hashFiles('**/version.mk') }}
          restore-keys: |
            ${{ runner.os }}-build-tool-
      - uses: actions/setup-node@v3
        with:
          node-version: 20.12
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - name: Update dependencies
        if: steps.cache-go.outputs.cache-hit != 'true'
        run: GOPROXY=https://proxy.golang.org go mod download
      - name: Generate codes
        run: make generate
      - name: Build
        run: make build
      - name: Build release
        run: make release
  test:
    uses: ./.github/workflows/test.yml
    with:
      options: --fail-fast --label-filter \\!slow
      timeout-minutes: 30

  result:
    name: Continuous Integration
    runs-on: ubuntu-20.04
    needs: [check, build, test]
    steps:
      - run: echo 'success'
